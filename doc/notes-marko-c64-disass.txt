
;; Insert "T" into keyboard buffer in VICE monitor
;; > c6 1       ; set length to 1
;; > 277 54     ; #$54 is ascii code for T
--- 157E Read keyboard
.C:157e   A5 C6      LDA $C6       ; length of keyboard buffer
.C:1580   08         PHP
.C:1581   AD 77 02   LDA $0277     ; keyboard buffer
.C:1584   09 80      ORA #$80
.C:1586   28         PLP
.C:1587   F0 17      BEQ $15A0
.C:1589   C9 A0      CMP #$A0
.C:158b   D0 04      BNE $1591
.C:158d   A0 00      LDY #$00
.C:158f   84 38      STY $38
.C:1591   EA         NOP
.C:1592   A4 38      LDY $38
.C:1594   C0 08      CPY #$08
.C:1596   B0 08      BCS $15A0
.C:1598   99 30 00   STA $0030,Y
.C:159b   E6 38      INC $38
.C:159d   20 A1 15   JSR $15A1
.C:15a0   60         RTS




;; code which seems to read block from disk. Triggered from example
;; on world map scrolling
--- A52F Read/write block from/to disk
.C:a52f   AD 14 A5   LDA $A514
.C:a532   48         PHA
.C:a533   18         CLC
.C:a534   69 B0      ADC #$B0
.C:a536   8D B5 A5   STA $A5B5
.C:a539   68         PLA
.C:a53a   C9 02      CMP #$02
.C:a53c   F0 16      BEQ $A554    ; Write? Branch Label_write, or
.C:a53e   20 6D A5   JSR $A56D    ;     continue read
.C:a541   A2 02      LDX #$02     ; Set channel 2, data
.C:a543   20 C6 FF   JSR $FFC6    ; CHKIN
.C:a546   A0 00      LDY #$00     ; set counter
.C:a548   20 CF FF   JSR $FFCF    ; CHRIN - read byte
.C:a54b   91 0E      STA ($0E),Y  ; store via pointer at $0E (eg. $e900)
.C:a54d   C8         INY          ; increment counter
.C:a54e   D0 F8      BNE $A548    ; read 256 bytes
.C:a550   20 CC FF   JSR $FFCC    ; CLRCHN
.C:a553   60         RTS
:Label_write
.C:a554   20 BD A5   JSR $A5BD
.C:a557   A2 02      LDX #$02     ; Set channel 2, data
.C:a559   20 C9 FF   JSR $FFC9    ; CHKOUT
.C:a55c   A0 00      LDY #$00     ; set counter
.C:a55e   B1 0E      LDA ($0E),Y  ; Load data
.C:a560   20 D2 FF   JSR $FFD2    ; CHROUT
.C:a563   C8         INY          ; inc counter
.C:a564   D0 F8      BNE $A55E    ; loop
.C:a566   20 CC FF   JSR $FFCC    ; CLRCHN
.C:a569   20 6D A5   JSR $A56D
.C:a56c   60         RTS



;; writes cmd weirdly into channel
;; 
;; >C:a5b4  d5 b1 ba b2  a0 b0 a0 00
;;          U  1  :  2   Sp 0  Sp
;; >C:a512  0e 06
;;
;; From manual: 
;;    PRINT#file#, "U1:" channel; drive; track; block
;;    160 print#15,"u1:";2;0;18;0
--- A56D Setup something for block read?
.C:a56d   A2 0F      LDX #$0F     ; open channel 15 for output
.C:a56f   20 C9 FF   JSR $FFC9    ; CHKOUT 
.C:a572   A0 00      LDY #$00
.C:a574   B9 B4 A5   LDA $A5B4,Y
.C:a577   F0 09      BEQ $A582    ; -> Label_1
.C:a579   29 7F      AND #$7F     ; clear 7th bit
.C:a57b   20 D2 FF   JSR $FFD2    ; CHROUT - write cmd "U1:2 0 "
.C:a57e   C8         INY
.C:a57f   4C 74 A5   JMP $A574
:Label_1
.C:a582   AD 13 A5   LDA $A513    ; Load track #
.C:a585   20 95 A5   JSR $A595
.C:a588   AD 12 A5   LDA $A512    ; Load sector #
.C:a58b   20 95 A5   JSR $A595
.C:a58e   20 CC FF   JSR $FFCC    ; CLRCHN
.C:a591   20 27 A6   JSR $A627
.C:a594   60         RTS


;; write A as string into file via CHROUT
;; counts number of 10s into X
--- A595 write accumalator as PETSCII string
.C:a595   A2 FF      LDX #$FF
.C:a597   38         SEC
.C:a598   E8         INX        ; counter, number of 10s
.C:a599   E9 0A      SBC #$0A   ; subtract 10
.C:a59b   B0 FB      BCS $A598  ; loop if still left
.C:a59d   69 0A      ADC #$0A   ; add 10, fix last iteration
.C:a59f   48         PHA        ; A has 2nd digit
.C:a5a0   8A         TXA        ; X has 1st digit
.C:a5a1   D0 02      BNE $A5A5  ; branch if 1st digit non-zero
.C:a5a3   A9 10      LDA #$10   ; space ($10 xor $30 = $20)
.C:a5a5   20 AE A5   JSR $A5AE  ; write 1st digit or space
.C:a5a8   68         PLA        ; pop 2nd digit 
.C:a5a9   20 AE A5   JSR $A5AE  ; write 2nd digit
.C:a5ac   A9 10      LDA #$10   ; setup to output space char
.C:a5ae   49 30      EOR #$30   
.C:a5b0   20 D2 FF   JSR $FFD2  ; CHROUT
.C:a5b3   60         RTS


--- A627 Process some disk read related stuff
.C:a627   A9 30      LDA #$30
.C:a629   8D 25 A6   STA $A625
.C:a62c   8D 26 A6   STA $A626
.C:a62f   A2 0F      LDX #$0F
.C:a631   20 C6 FF   JSR $FFC6  ; CHKIN
.C:a634   20 CF FF   JSR $FFCF  ; CHRIN
.C:a637   C9 0D      CMP #$0D
.C:a639   F0 10      BEQ $A64B
.C:a63b   8D 25 A6   STA $A625
.C:a63e   20 CF FF   JSR $FFCF  ; CHRIN
.C:a641   8D 26 A6   STA $A626  
.C:a644   20 CF FF   JSR $FFCF  ; CHRIN
.C:a647   C9 0D      CMP #$0D
.C:a649   D0 F9      BNE $A644
.C:a64b   20 CC FF   JSR $FFCC  ; CLRCHN
.C:a64e   AD 25 A6   LDA $A625
.C:a651   C9 30      CMP #$30
.C:a653   D0 08      BNE $A65D
.C:a655   AD 26 A6   LDA $A626
.C:a658   C9 30      CMP #$30
.C:a65a   D0 01      BNE $A65D
.C:a65c   60         RTS
.C:a65d   20 69 A6   JSR $A669
.C:a660   20 74 A6   JSR $A674
.C:a663   AE 08 A5   LDX $A508
.C:a666   9A         TXS
.C:a667   38         SEC
.C:a668   60         RTS



;; potential prelude to the disk accessing code below
;; code block which seems to access disk
;;    DOS block access needs two channels, one for command, and other
;;    for data
;; 
;;    "The data channel for random access files is OPENed by selecting
;;     the pound sign (#) as the file name."

--- A5E3
.C:a5e3   A9 00      LDA #$00   ; file name length, no name
.C:a5e5   20 BD FF   JSR $FFBD  ; SETNAM
.C:a5e8   A5 5F      LDA $5F    ; Disk number 1 or 2
.C:a5ea   18         CLC
.C:a5eb   69 07      ADC #$07   ; disk number to 8 or 9
.C:a5ed   AA         TAX
.C:a5ee   A9 0F      LDA #$0F   ; Channel 15, command?
.C:a5f0   A8         TAY
.C:a5f1   20 BA FF   JSR $FFBA  ; SETLFS
.C:a5f4   20 C0 FF   JSR $FFC0  ; OPEN
.C:a5f7   20 B7 FF   JSR $FFB7  ; READST
.C:a5fa   8D 25 A6   STA $A625  ;
.C:a5fd   29 80      AND #$80
.C:a5ff   D0 5C      BNE $A65D
.C:a601   A9 01      LDA #$01    ; file name length
.C:a603   A2 24      LDX #$24    ; ptr to name: at a624 is 23 (#)
.C:a605   A0 A6      LDY #$A6
.C:a607   20 BD FF   JSR $FFBD   ; SETNAM
.C:a60a   A5 5F      LDA $5F
.C:a60c   18         CLC
.C:a60d   69 07      ADC #$07
.C:a60f   AA         TAX
.C:a610   A9 02      LDA #$02    ; channel 2, data?
.C:a612   A8         TAY
.C:a613   20 BA FF   JSR $FFBA   ; SETLFS
.C:a616   20 C0 FF   JSR $FFC0   ; OPEN
.C:a619   20 B7 FF   JSR $FFB7   ; READST
.C:a61c   8D 25 A6   STA $A625   ; local static var?
.C:a61f   29 80      AND #$80    ; Device present?
.C:a621   D0 3A      BNE $A65D   ;    no - branch
.C:a623   60         RTS         ;    yes - return
.C:a624   23 30      RLA ($30,X) ; <- local static data?


---  A65D
.C:a65d   20 69 A6   JSR $A669
.C:a660   20 74 A6   JSR $A674
.C:a663   AE 08 A5   LDX $A508
.C:a666   9A         TXS
.C:a667   38         SEC
.C:a668   60         RTS


;; Close disk?
--- A669
.C:a669   A9 02      LDA #$02   ; data channel?
.C:a66b   20 C3 FF   JSR $FFC3  ; CLOSE
.C:a66e   A9 0F      LDA #$0F   ; command channel;
.C:a670   20 C3 FF   JSR $FFC3  ; CLOSE
.C:a673   60         RTS


;; Set interrupt pointers
--- A674
.C:a674   78         SEI
.C:a675   A9 96      LDA #$96
.C:a677   8D FE FF   STA $FFFE 
.C:a67a   A9 A6      LDA #$A6
.C:a67c   8D FF FF   STA $FFFF  ; Set IRQ pointer to $A696
.C:a67f   A9 BB      LDA #$BB
.C:a681   8D FA FF   STA $FFFA
.C:a684   A9 A6      LDA #$A6
.C:a686   8D FB FF   STA $FFFB  ; Set NMI pointer to $A6BB
.C:a689   A9 35      LDA #$35   ; Set memory bank setup to
.C:a68b   85 01      STA $01    ;   RAM visible at $A000 and $E000
.C:a68d   58         CLI
.C:a68e   60         RTS

--- A696 IRQ handler
.C:a696   2C 69 FF   BIT $FF69
.C:a699   85 7B      STA $7B
.C:a69b   60         RTS


;; Memory snapshots while game in world map -mode

.C:0c72   20 90 0F   JSR $0F90    ; <-- 0ae4:  JSR $0C72
.C:0c75   20 65 18   JSR $1865
.C:0c78   38         SEC
.C:0c79   A5 12      LDA $12
.C:0c7b   E9 05      SBC #$05
.C:0c7d   85 40      STA $40
.C:0c7f   38         SEC
.C:0c80   A5 13      LDA $13
.C:0c82   E9 05      SBC #$05
.C:0c84   85 41      STA $41
.C:0c86   A9 00      LDA #$00
.C:0c88   85 42      STA $42
.C:0c8a   85 43      STA $43
.C:0c8c   A8         TAY
.C:0c8d   AA         TAX
.C:0c8e   18         CLC
.C:0c8f   A5 40      LDA $40
.C:0c91   65 42      ADC $42
.C:0c93   85 44      STA $44
.C:0c95   18         CLC
.C:0c96   A5 41      LDA $41
.C:0c98   65 43      ADC $43
.C:0c9a   85 45      STA $45
.C:0c9c   20 79 15   JSR $1579
.C:0c9f   85 7C      STA $7C
.C:0ca1   A5 44      LDA $44
.C:0ca3   29 0F      AND #$0F
.C:0ca5   05 7C      ORA $7C
.C:0ca7   85 7C      STA $7C
.C:0ca9   A5 45      LDA $45
.C:0cab   29 10      AND #$10
.C:0cad   0A         ASL A
.C:0cae   05 44      ORA $44
.C:0cb0   20 73 15   JSR $1573
.C:0cb3   18         CLC
.C:0cb4   69 E8      ADC #$E8
.C:0cb6   85 7D      STA $7D
.C:0cb8   B1 7C      LDA ($7C),Y
.C:0cba   9D 80 AE   STA $AE80,X
.C:0cbd   E8         INX
.C:0cbe   E6 42      INC $42
.C:0cc0   A5 42      LDA $42
.C:0cc2   C9 0B      CMP #$0B
.C:0cc4   D0 C8      BNE $0C8E
.C:0cc6   84 42      STY $42
.C:0cc8   E6 43      INC $43
.C:0cca   A5 43      LDA $43
.C:0ccc   C9 0B      CMP #$0B
.C:0cce   D0 BE      BNE $0C8E
.C:0cd0   A2 1F      LDX #$1F
.C:0cd2   BD 00 AC   LDA $AC00,X   ; <- branch from $0d0f
.C:0cd5   F0 2D      BEQ $0D04     ; continue if zero
.C:0cd7   BD 20 AC   LDA $AC20,X
.C:0cda   18         CLC
.C:0cdb   69 05      ADC #$05
.C:0cdd   38         SEC
.C:0cde   E5 10      SBC $10
.C:0ce0   C9 0B      CMP #$0B
.C:0ce2   B0 20      BCS $0D04
.C:0ce4   85 44      STA $44
.C:0ce6   BD 40 AC   LDA $AC40,X
.C:0ce9   18         CLC
.C:0cea   69 05      ADC #$05
.C:0cec   38         SEC
.C:0ced   E5 11      SBC $11
.C:0cef   C9 0B      CMP #$0B
.C:0cf1   B0 11      BCS $0D04
.C:0cf3   85 45      STA $45
.C:0cf5   A4 45      LDY $45
.C:0cf7   B9 49 9F   LDA $9F49,Y
.C:0cfa   18         CLC
.C:0cfb   65 44      ADC $44
.C:0cfd   A8         TAY
.C:0cfe   BD 00 AC   LDA $AC00,X
.C:0d01   99 80 AE   STA $AE80,Y
.C:0d04   CA         DEX           ;  
.C:0d05   10 CB      BPL $0CD2     ; --^ 
.C:0d07   A5 6D      LDA $6D
.C:0d09   F0 2A      BEQ $0D35
.C:0d0b   A5 6E      LDA $6E
.C:0d0d   18         CLC
.C:0d0e   69 05      ADC #$05
.C:0d10   38         SEC
.C:0d11   E5 10      SBC $10
.C:0d13   C9 0B      CMP #$0B
.C:0d15   B0 1E      BCS $0D35
.C:0d17   85 44      STA $44
.C:0d19   A5 6F      LDA $6F
.C:0d1b   18         CLC
.C:0d1c   69 05      ADC #$05
.C:0d1e   38         SEC
.C:0d1f   E5 11      SBC $11
.C:0d21   C9 0B      CMP #$0B
.C:0d23   B0 10      BCS $0D35
.C:0d25   85 45      STA $45
.C:0d27   A4 45      LDY $45
.C:0d29   B9 49 9F   LDA $9F49,Y
.C:0d2c   18         CLC
.C:0d2d   65 44      ADC $44
.C:0d2f   A8         TAY
.C:0d30   A5 6D      LDA $6D
.C:0d32   99 80 AE   STA $AE80,Y
.C:0d35   AD B1 AE   LDA $AEB1
.C:0d38   85 49      STA $49
.C:0d3a   AD C7 AE   LDA $AEC7
.C:0d3d   85 4A      STA $4A
.C:0d3f   AD BD AE   LDA $AEBD
.C:0d42   85 4B      STA $4B
.C:0d44   AD BB AE   LDA $AEBB
.C:0d47   85 4C      STA $4C
.C:0d49   AD BC AE   LDA $AEBC
.C:0d4c   85 48      STA $48
.C:0d4e   A5 1E      LDA $1E
.C:0d50   8D BC AE   STA $AEBC
.C:0d53   A5 1D      LDA $1D
.C:0d55   F0 0E      BEQ $0D65
.C:0d57   A2 78      LDX #$78
.C:0d59   BD 80 AE   LDA $AE80,X
.C:0d5c   9D 00 AE   STA $AE00,X
.C:0d5f   CA         DEX
.C:0d60   10 F7      BPL $0D59
.C:0d62   4C 6C 0E   JMP $0E6C
.C:0d65   A2 78      LDX #$78
.C:0d67   A9 7E      LDA #$7E
.C:0d69   9D 00 AE   STA $AE00,X
.C:0d6c   CA         DEX
.C:0d6d   10 FA      BPL $0D69
.C:0d6f   A9 78      LDA #$78
.C:0d71   85 70      STA $70
.C:0d73   A9 0A      LDA #$0A
.C:0d75   85 44      STA $44
.C:0d77   85 45      STA $45
.C:0d79   A5 44      LDA $44
.C:0d7b   85 40      STA $40
.C:0d7d   A5 45      LDA $45
.C:0d7f   85 41      STA $41
.C:0d81   A5 70      LDA $70
.C:0d83   85 71      STA $71
.C:0d85   A6 40      LDX $40
.C:0d87   A4 41      LDY $41
.C:0d89   A5 71      LDA $71
.C:0d8b   18         CLC
.C:0d8c   7D 57 0F   ADC $0F57,X
.C:0d8f   18         CLC
.C:0d90   79 62 0F   ADC $0F62,Y
.C:0d93   C9 3C      CMP #$3C
.C:0d95   F0 2F      BEQ $0DC6
.C:0d97   85 71      STA $71
.C:0d99   AA         TAX
.C:0d9a   BD 80 AE   LDA $AE80,X
.C:0d9d   C9 06      CMP #$06
.C:0d9f   F0 2D      BEQ $0DCE
.C:0da1   C9 08      CMP #$08
.C:0da3   F0 29      BEQ $0DCE
.C:0da5   C9 49      CMP #$49
.C:0da7   F0 25      BEQ $0DCE
.C:0da9   C9 7E      CMP #$7E
.C:0dab   F0 21      BEQ $0DCE
.C:0dad   C9 7F      CMP #$7F
.C:0daf   F0 1D      BEQ $0DCE
.C:0db1   A5 40      LDA $40
.C:0db3   AA         TAX
.C:0db4   18         CLC
.C:0db5   7D 57 0F   ADC $0F57,X
.C:0db8   85 40      STA $40
.C:0dba   A5 41      LDA $41
.C:0dbc   AA         TAX
.C:0dbd   18         CLC
.C:0dbe   7D 57 0F   ADC $0F57,X
.C:0dc1   85 41      STA $41
.C:0dc3   4C 85 0D   JMP $0D85
.C:0dc6   A6 70      LDX $70
.C:0dc8   BD 80 AE   LDA $AE80,X
.C:0dcb   9D 00 AE   STA $AE00,X
.C:0dce   C6 70      DEC $70
.C:0dd0   C6 44      DEC $44
.C:0dd2   10 A5      BPL $0D79
.C:0dd4   A9 0A      LDA #$0A
.C:0dd6   85 44      STA $44
.C:0dd8   C6 45      DEC $45
.C:0dda   10 9D      BPL $0D79
.C:0ddc   A9 78      LDA #$78
.C:0dde   85 70      STA $70
.C:0de0   A9 0A      LDA #$0A
.C:0de2   85 44      STA $44
.C:0de4   85 45      STA $45
.C:0de6   A5 44      LDA $44
.C:0de8   85 40      STA $40
.C:0dea   A5 45      LDA $45
.C:0dec   85 41      STA $41
.C:0dee   A5 70      LDA $70
.C:0df0   85 71      STA $71
.C:0df2   AA         TAX
.C:0df3   BD 00 AE   LDA $AE00,X
.C:0df6   C9 7E      CMP #$7E
.C:0df8   D0 61      BNE $0E5B
.C:0dfa   A6 40      LDX $40
.C:0dfc   A4 41      LDY $41
.C:0dfe   BD 6D 0F   LDA $0F6D,X
.C:0e01   D9 6D 0F   CMP $0F6D,Y
.C:0e04   F0 04      BEQ $0E0A
.C:0e06   90 21      BCC $0E29
.C:0e08   B0 13      BCS $0E1D
.C:0e0a   A5 71      LDA $71
.C:0e0c   18         CLC
.C:0e0d   7D 57 0F   ADC $0F57,X
.C:0e10   18         CLC
.C:0e11   79 62 0F   ADC $0F62,Y
.C:0e14   20 78 0F   JSR $0F78
.C:0e17   20 84 0F   JSR $0F84
.C:0e1a   4C 32 0E   JMP $0E32
.C:0e1d   A5 71      LDA $71
.C:0e1f   18         CLC
.C:0e20   7D 57 0F   ADC $0F57,X
.C:0e23   20 78 0F   JSR $0F78
.C:0e26   4C 32 0E   JMP $0E32
.C:0e29   A5 71      LDA $71
.C:0e2b   18         CLC
.C:0e2c   79 62 0F   ADC $0F62,Y
.C:0e2f   20 84 0F   JSR $0F84
.C:0e32   C9 3C      CMP #$3C
.C:0e34   F0 1D      BEQ $0E53
.C:0e36   85 71      STA $71
.C:0e38   AA         TAX
.C:0e39   BD 80 AE   LDA $AE80,X
.C:0e3c   C9 06      CMP #$06
.C:0e3e   F0 1B      BEQ $0E5B
.C:0e40   C9 08      CMP #$08
.C:0e42   F0 17      BEQ $0E5B
.C:0e44   C9 49      CMP #$49
.C:0e46   F0 13      BEQ $0E5B
.C:0e48   C9 7E      CMP #$7E
.C:0e4a   F0 0F      BEQ $0E5B
.C:0e4c   C9 7F      CMP #$7F
.C:0e4e   F0 0B      BEQ $0E5B
.C:0e50   4C FA 0D   JMP $0DFA
.C:0e53   A6 70      LDX $70
.C:0e55   BD 80 AE   LDA $AE80,X
.C:0e58   9D 00 AE   STA $AE00,X
.C:0e5b   C6 70      DEC $70

;; Copy tile bits to screen. Uses and restores zero-page pointers at 
;;    $58, $59   ; Pointer to screen color map ($0429)
;;    $7c, $7d   ; Pointer to screen bitmap 
;;    $7e, $7f   ; Pointer to tile bitmaps


.C:0e5b   C6 70      DEC $70    ; <-- 0df8: BNE 0e5b
.C:0e5d   C6 44      DEC $44
.C:0e5f   10 85      BPL $0DE6
.C:0e61   A9 0A      LDA #$0A
.C:0e63   85 44      STA $44
.C:0e65   C6 45      DEC $45
.C:0e67   30 03      BMI $0E6C
.C:0e69   4C E6 0D   JMP $0DE6
.C:0e6c   A5 7E      LDA $7E
.C:0e6e   48         PHA
.C:0e6f   A5 7F      LDA $7F
.C:0e71   48         PHA
.C:0e72   A5 7C      LDA $7C
.C:0e74   48         PHA
.C:0e75   A5 7D      LDA $7D
.C:0e77   48         PHA
.C:0e78   A5 58      LDA $58
.C:0e7a   48         PHA
.C:0e7b   A5 59      LDA $59
.C:0e7d   48         PHA
.C:0e7e   A9 00      LDA #$00
.C:0e80   8D AE 0E   STA $0EAE
.C:0e83   A9 29      LDA #$29
.C:0e85   85 58      STA $58
.C:0e87   A9 04      LDA #$04
.C:0e89   85 59      STA $59
.C:0e8b   A0 08      LDY #$08
.C:0e8d   B9 00 E0   LDA $E000,Y
.C:0e90   85 7C      STA $7C
.C:0e92   B9 C0 E0   LDA $E0C0,Y
.C:0e95   85 7D      STA $7D
.C:0e97   A5 7C      LDA $7C
.C:0e99   18         CLC
.C:0e9a   69 08      ADC #$08
.C:0e9c   85 7C      STA $7C
.C:0e9e   A5 7D      LDA $7D
.C:0ea0   69 00      ADC #$00
.C:0ea2   85 7D      STA $7D
.C:0ea4   A9 00      LDA #$00
.C:0ea6   85 72      STA $72
.C:0ea8   A9 00      LDA #$00
.C:0eaa   8D 56 0F   STA $0F56
.C:0ead   AC 79 AE   LDY $AE79
.C:0eb0   98         TYA
.C:0eb1   48         PHA
.C:0eb2   20 8B 14   JSR $148B
.C:0eb5   AD 56 0F   LDA $0F56
.C:0eb8   38         SEC
.C:0eb9   0A         ASL A
.C:0eba   A8         TAY
.C:0ebb   68         PLA
.C:0ebc   AA         TAX
.C:0ebd   BD B0 E1   LDA $E1B0,X    ; load tile color to A
.C:0ec0   91 58      STA ($58),Y    ; store color for tile top two char-cells
.C:0ec2   C8         INY
.C:0ec3   91 58      STA ($58),Y
.C:0ec5   48         PHA
.C:0ec6   98         TYA
.C:0ec7   18         CLC
.C:0ec8   69 27      ADC #$27       ; advance to next char row +39
.C:0eca   A8         TAY
.C:0ecb   68         PLA
.C:0ecc   91 58      STA ($58),Y    ; store color for tile bottom two char-cells
.C:0ece   C8         INY
.C:0ecf   91 58      STA ($58),Y
.C:0ed1   A0 0F      LDY #$0F
.C:0ed3   B1 7E      LDA ($7E),Y
.C:0ed5   91 7C      STA ($7C),Y
.C:0ed7   88         DEY
.C:0ed8   10 F9      BPL $0ED3
.C:0eda   A5 7F      LDA $7F
.C:0edc   49 70      EOR #$70
.C:0ede   85 7F      STA $7F
.C:0ee0   A5 7C      LDA $7C
.C:0ee2   48         PHA
.C:0ee3   18         CLC
.C:0ee4   69 40      ADC #$40
.C:0ee6   85 7C      STA $7C
.C:0ee8   A5 7D      LDA $7D
.C:0eea   48         PHA
.C:0eeb   69 01      ADC #$01
.C:0eed   85 7D      STA $7D
.C:0eef   A0 0F      LDY #$0F
.C:0ef1   B1 7E      LDA ($7E),Y
.C:0ef3   91 7C      STA ($7C),Y
.C:0ef5   88         DEY
.C:0ef6   10 F9      BPL $0EF1
.C:0ef8   A5 7F      LDA $7F
.C:0efa   49 70      EOR #$70
.C:0efc   85 7F      STA $7F
.C:0efe   68         PLA
.C:0eff   85 7D      STA $7D
.C:0f01   68         PLA
.C:0f02   85 7C      STA $7C
.C:0f04   EE AE 0E   INC $0EAE
.C:0f07   A5 7C      LDA $7C
.C:0f09   18         CLC
.C:0f0a   69 10      ADC #$10
.C:0f0c   85 7C      STA $7C
.C:0f0e   A5 7D      LDA $7D
.C:0f10   69 00      ADC #$00
.C:0f12   85 7D      STA $7D
.C:0f14   EE 56 0F   INC $0F56
.C:0f17   AD 56 0F   LDA $0F56
.C:0f1a   C9 0B      CMP #$0B
.C:0f1c   D0 8F      BNE $0EAD
.C:0f1e   A5 58      LDA $58
.C:0f20   18         CLC
.C:0f21   69 50      ADC #$50
.C:0f23   85 58      STA $58
.C:0f25   A5 59      LDA $59
.C:0f27   69 00      ADC #$00
.C:0f29   85 59      STA $59
.C:0f2b   A5 7C      LDA $7C
.C:0f2d   18         CLC
.C:0f2e   69 D0      ADC #$D0
.C:0f30   85 7C      STA $7C
.C:0f32   A5 7D      LDA $7D
.C:0f34   69 01      ADC #$01
.C:0f36   85 7D      STA $7D
.C:0f38   E6 72      INC $72
.C:0f3a   A5 72      LDA $72
.C:0f3c   C9 0B      CMP #$0B
.C:0f3e   F0 03      BEQ $0F43
.C:0f40   4C A8 0E   JMP $0EA8
.C:0f43   68         PLA
.C:0f44   85 59      STA $59
.C:0f46   68         PLA
.C:0f47   85 58      STA $58
.C:0f49   68         PLA
.C:0f4a   85 7D      STA $7D
.C:0f4c   68         PLA
.C:0f4d   85 7C      STA $7C
.C:0f4f   68         PLA
.C:0f50   85 7F      STA $7F
.C:0f52   68         PLA
.C:0f53   85 7E      STA $7E
.C:0f55   60         RTS        ; return





;; Zero page
$0e, 0f  ; store pointer when reading block from disk
$10
$11
$12
$13
$14
$15
$1E
$58,$59 ; 
$5F   ; disk drive to access: 1=drive 8, 2=drive9
$60
$61
$62
$63
$74
$75  
$7C,$7D ; blt dst
$7E,$7F ; blt src

